import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.methods import DeleteWebhook
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from bot.handlers.user import user_router
from bot.handlers.business import business_router
from bot.handlers.admin import admin_router
from bot.database.database import init_db, delete_expired_subscriptions, migrate_db
from config import BOT_TOKEN



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN,
          default=DefaultBotProperties(parse_mode=ParseMode.HTML, link_preview_is_disabled=True))

async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Ö—É–π —ç—Ç—É –æ—Ö—É–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É!")

    # –î–∏—Å–ø–µ—Ç—á–µ—Ä
    dp = Dispatcher()
    logger.info("‚ú® –î–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    for router in [user_router, business_router, admin_router]:
        dp.include_router(router)
        logger.info(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω —Ä–æ—É—Ç–µ—Ä: {router.__class__.__name__}")

    try:
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        logger.info("üóÑÔ∏è –°–æ–∑–¥–∞—ë–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        await init_db()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

        logger.info("üîÑ –î–µ–ª–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é...")
        await migrate_db()
        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –ü–∏–∑–¥–µ—Ü —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    logger.info("‚è∞ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á...")
    scheduler = AsyncIOScheduler()
    scheduler.add_job(delete_expired_subscriptions, 'interval', hours=1)

    from bot.handlers.admin import send_stats_message
    scheduler.add_job(send_stats_message, 'interval', minutes=30)
    scheduler.start()
    logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
    await bot(DeleteWebhook(drop_pending_updates=True))
    logger.info("üéâ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await dp.start_polling(bot)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
def handle_exception(exc_type, exc_value, exc_traceback):
    if issubclass(exc_type, KeyboardInterrupt):
        sys.__excepthook__(exc_type, exc_value, exc_traceback)
        return
    
    logger.error(
        "–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:",
        exc_info=(exc_type, exc_value, exc_traceback)
    )

import sys
sys.excepthook = handle_exception

if __name__ == '__main__':
    try:
        print("\nüî• –ó–ê–ü–£–°–ö–ê–ï–ú –≠–¢–û–ì–û –ö–†–ê–°–ê–í–ß–ò–ö–ê!\n")
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüò¥ –ë–æ—Ç —É—à—ë–ª —Å–ø–∞—Ç—å (–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
    except Exception as e:
        print(f"\nüíÄ –ü–ò–ó–î–ï–¶: {e}")
    finally:
        print("\nüëã –í—Å–µ–º –ø–æ–∫–∞!")