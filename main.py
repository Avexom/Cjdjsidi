import asyncio
import logging
import colorlog
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = colorlog.getLogger('bot')

from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.methods import DeleteWebhook
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from bot.handlers.user import user_router
from bot.handlers.business import business_router
from bot.handlers.admin import admin_router
from bot.database.database import init_db, delete_expired_subscriptions, migrate_db # Now includes migrate_db
from config import BOT_TOKEN

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN,
          default=DefaultBotProperties(parse_mode=ParseMode.HTML, link_preview_is_disabled=True))

async def main():
    dp = Dispatcher()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    handler = colorlog.StreamHandler()
    handler.setFormatter(colorlog.ColoredFormatter(
        '%(log_color)s%(message)s',
        log_colors={
            'DEBUG': 'cyan',
            'INFO': 'green',
            'WARNING': 'yellow',
            'ERROR': 'red',
            'CRITICAL': 'red,bg_white',
        }
    ))

    logger = colorlog.getLogger('bot')
    logger.addHandler(handler)
    logger.setLevel(logging.INFO)
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –ª–æ–≥–∏
    logging.getLogger('aiosqlite').setLevel(logging.ERROR)
    logging.getLogger('aiogram').setLevel(logging.ERROR)
    logging.getLogger('apscheduler').setLevel(logging.ERROR)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–∏ –ª–æ–≥–∏
    logger.info('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    
    @dp.message()
    async def log_message(message: Message, bot: Bot, event_from_user):
        username = message.from_user.username or message.from_user.first_name
        logger.info(f'üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username}')
        return message

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
    for router in [user_router, business_router, admin_router]:
        dp.include_router(router)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await init_db()
    await migrate_db() # Added migration call

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç—ë–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    scheduler = AsyncIOScheduler()
    scheduler.add_job(delete_expired_subscriptions, 'interval', hours=1)
    scheduler.start()

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await bot(DeleteWebhook(drop_pending_updates=True))
    await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")