from datetime import datetime, timedelta
from aiogram import Router, F, BaseMiddleware
from aiogram.filters import Command
from aiogram.types import Message, TelegramObject
from aiogram.fsm.context import FSMContext
from aiogram.enums.parse_mode import ParseMode
import bot.database.database as db
import logging
from pydantic import BaseModel, PositiveInt, confloat
from async_lru import alru_cache  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º alru_cache

from config import ADMIN_IDS

admin_router = Router()
logger = logging.getLogger(__name__)

# –ú–æ–¥–µ–ª–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
class GiveSubscriptionRequest(BaseModel):
    user_id: PositiveInt
    days: PositiveInt

class SetPriceRequest(BaseModel):
    price: confloat(gt=0)

# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
class AdminMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: TelegramObject, data: dict):
        if event.from_user.id not in ADMIN_IDS:
            await event.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        return await handler(event, data)

admin_router.message.middleware(AdminMiddleware())

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –ø–æ–º–æ—â—å—é async_lru
@alru_cache(maxsize=1)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º alru_cache –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
async def get_cached_statistics():
    return {
        "total_users": await db.get_total_users(),
        "total_subscriptions": await db.get_total_subscriptions(),
        "total_users_with_active_business_bot": await db.get_total_users_with_active_business_bot(),
        "total_messages": await db.get_total_messages(),
        "total_edited_messages": await db.get_total_edited_messages(),
        "total_deleted_messages": await db.get_total_deleted_messages(),
        "subscription_price": await db.get_subscription_price(),
    }

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
async def generate_admin_panel_text(stats):
    return f"""
<b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:</b> {stats['subscription_price']}$

<b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>
- /give –∞–π–¥–∏_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–Ω–µ–π - –≤—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
- /price —Ü–µ–Ω–∞ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏
- /ban –∞–π–¥–∏_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏—á–∏–Ω–∞ - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- /unban –∞–π–¥–∏_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- /broadcast —Ç–µ–∫—Å—Ç - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
- /stats - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
- /logs - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –±–æ—Ç–∞

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>
- –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π: {stats['total_subscriptions']}
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º –±–∏–∑–Ω–µ—Å-–±–æ—Ç–æ–º: {stats['total_users_with_active_business_bot']}
- –í—Å–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}
- –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_edited_messages']}
- –£–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_deleted_messages']}
"""

# –•—ç–Ω–¥–ª–µ—Ä—ã
from aiogram.types import CallbackQuery
from bot.keyboards.user import admin_keyboard

@admin_router.message(F.text == "/admin")
async def admin_panel(message: Message):
    try:
        stats = await get_cached_statistics()
        text = await generate_admin_panel_text(stats)
        await message.answer(text, parse_mode=ParseMode.HTML, reply_markup=admin_keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

@admin_router.message(F.text.startswith("/give"))
async def give_subscription(message: Message):
    try:
        args = message.text.split()
        if len(args) != 3:
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /give –∞–π–¥–∏_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–Ω–µ–π")
            return

        request = GiveSubscriptionRequest(user_id=int(args[1]), days=int(args[2]))

        if await db.get_user(request.user_id) is None:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        await db.create_subscription(user_telegram_id=request.user_id, end_date=datetime.now() + timedelta(days=request.days))
        await message.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {request.user_id} –Ω–∞ {request.days} –¥–Ω–µ–π.")
    except ValueError as e:
        await message.answer(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏.")

@admin_router.message(F.text.startswith("/price"))
async def set_subscription_price(message: Message):
    try:
        args = message.text.split()
        if len(args) != 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /price —Ü–µ–Ω–∞")
            return

        request = SetPriceRequest(price=float(args[1]))
        await db.set_subscription_price(request.price)
        await message.answer(f"–¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {request.price}$.")
    except ValueError as e:
        await message.answer(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏.")
@admin_router.message(Command("reset_channels"))
async def reset_channels(message: Message):
    try:
        await db.reset_channel_indexes()
        await message.answer("–ò–Ω–¥–µ–∫—Å—ã –∫–∞–Ω–∞–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")

# New admin commands
@admin_router.message(F.text.startswith("/ban"))
async def ban_user(message: Message):
    try:
        args = message.text.split()
        if len(args) < 3:
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /ban –∞–π–¥–∏_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏—á–∏–Ω–∞")
            return
        user_id = int(args[1])
        reason = " ".join(args[2:])
        await db.ban_user(user_id, reason)
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

@admin_router.message(F.text.startswith("/unban"))
async def unban_user(message: Message):
    try:
        args = message.text.split()
        if len(args) != 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /unban –∞–π–¥–∏_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        user_id = int(args[1])
        await db.unban_user(user_id)
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

@admin_router.message(F.text.startswith("/broadcast"))
async def broadcast_message(message: Message):
    try:
        text = message.text[len("/broadcast "):]
        await db.broadcast_message(text)
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


@admin_router.message(Command("stats"))
async def detailed_stats(message: Message):
    try:
        stats = await get_cached_statistics()
        detailed_stats_text = f"""
        –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
        - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
        - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π: {stats['total_subscriptions']}
        - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º –±–∏–∑–Ω–µ—Å-–±–æ—Ç–æ–º: {stats['total_users_with_active_business_bot']}
        - –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}
        - –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_edited_messages']}
        - –£–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_deleted_messages']}
        """
        await message.answer(detailed_stats_text)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


@admin_router.message(Command("logs"))
async def show_logs(message: Message):
    try:
        logs = await db.get_recent_logs() # Assumed function in db.py
        log_message = "\n".join(logs) or "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö."
        await message.answer(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –±–æ—Ç–∞:\n{log_message}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")
# Callback handlers
@admin_router.callback_query(F.data == "admin_stats")
async def admin_stats_callback(callback: CallbackQuery):
    await callback.answer()
    await detailed_stats(callback.message)

@admin_router.callback_query(F.data == "admin_logs")
async def admin_logs_callback(callback: CallbackQuery):
    await callback.answer()
    await show_logs(callback.message)

from aiogram.fsm.state import State, StatesGroup

class AdminStates(StatesGroup):
    waiting_for_broadcast = State()
    waiting_for_price = State()
    waiting_for_give_username = State()
    waiting_for_give_days = State()
    waiting_for_ban = State()
    waiting_for_unban = State()

@admin_router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(AdminStates.waiting_for_broadcast)

@admin_router.message(AdminStates.waiting_for_broadcast)
async def process_broadcast_text(message: Message, state: FSMContext):
    try:
        users = await db.broadcast_message(message.text)
        sent_count = 0
        for user_id in users:
            try:
                await message.bot.send_message(chat_id=user_id, text=message.text)
                sent_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ {len(users)}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    finally:
        await state.clear()

@admin_router.callback_query(F.data == "admin_price")
async def admin_price_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ $:")
    await state.set_state(AdminStates.waiting_for_price)

@admin_router.message(AdminStates.waiting_for_price)
async def process_price(message: Message, state: FSMContext):
    try:
        price = float(message.text)
        await db.set_subscription_price(price)
        await message.answer(f"–¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {price}$")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    finally:
        await state.clear()

@admin_router.callback_query(F.data == "admin_give")
async def admin_give_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AdminStates.waiting_for_give_username)

@admin_router.message(AdminStates.waiting_for_give_username)
async def process_give_username(message: Message, state: FSMContext):
    await state.update_data(username=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏:")
    await state.set_state(AdminStates.waiting_for_give_days)

@admin_router.message(AdminStates.waiting_for_give_days)
async def process_give_days(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        username = data['username'].replace('@', '')  # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        days = int(message.text)

        if days <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            await state.clear()
            return

        user = await db.get_user_by_username(username)
        if user:
            await db.create_subscription(user_telegram_id=user.telegram_id, 
                                      end_date=datetime.now() + timedelta(days=days))
            await message.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} –Ω–∞ {days} –¥–Ω–µ–π")
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π")
    finally:
        await state.clear()

@admin_router.callback_query(F.data == "admin_ban")
async def admin_ban_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞:")
    await state.set_state(AdminStates.waiting_for_ban)

@admin_router.message(AdminStates.waiting_for_ban)
async def process_ban(message: Message, state: FSMContext):
    try:
        identifier = message.text.strip()
        user = await db.get_user_by_username(identifier) or await db.get_user(int(identifier))
        if user:
            if user.is_banned:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                return
            await db.ban_user(user.telegram_id, "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            username_text = f" (@{user.username})" if user.username else ""
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id}{username_text} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            try:
                await message.bot.send_message(
                    user.telegram_id,
                    "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
                )
            except Exception:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ")
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {str(e)}")
    finally:
        await state.clear()

@admin_router.callback_query(F.data == "admin_unban")
async def admin_unban_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:")
    await state.set_state(AdminStates.waiting_for_unban)

@admin_router.message(AdminStates.waiting_for_unban)
async def process_unban(message: Message, state: FSMContext):
    try:
        identifier = message.text.strip()
        user = await db.get_user_by_username(identifier) or await db.get_user(int(identifier))
        if user:
            if not user.is_banned:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                return
            await db.unban_user(user.telegram_id)
            username_text = f" (@{user.username})" if user.username else ""
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id}{username_text} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            try:
                await message.bot.send_message(
                    user.telegram_id,
                    "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
                )
            except Exception:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ")
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {str(e)}")
    finally:
        await state.clear()