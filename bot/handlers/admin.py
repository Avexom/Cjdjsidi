from datetime import datetime, timedelta
from aiogram import Router, F, BaseMiddleware
from aiogram.types import Message, TelegramObject
from aiogram.enums.parse_mode import ParseMode
import bot.database.database as db
import logging
from pydantic import BaseModel, PositiveInt, confloat
from async_lru import alru_cache  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º alru_cache

from config import ADMIN_IDS

admin_router = Router()
logger = logging.getLogger(__name__)

# –ú–æ–¥–µ–ª–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
class GiveSubscriptionRequest(BaseModel):
    user_id: PositiveInt
    days: PositiveInt

class SetPriceRequest(BaseModel):
    price: confloat(gt=0)

# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
class AdminMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: TelegramObject, data: dict):
        if event.from_user.id not in ADMIN_IDS:
            await event.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        return await handler(event, data)

admin_router.message.middleware(AdminMiddleware())

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –ø–æ–º–æ—â—å—é async_lru
@alru_cache(maxsize=1)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º alru_cache –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
async def get_cached_statistics():
    return {
        "total_users": await db.get_total_users(),
        "total_subscriptions": await db.get_total_subscriptions(),
        "total_users_with_active_business_bot": await db.get_total_users_with_active_business_bot(),
        "total_messages": await db.get_total_messages(),
        "total_edited_messages": await db.get_total_edited_messages(),
        "total_deleted_messages": await db.get_total_deleted_messages(),
        "subscription_price": await db.get_subscription_price(),
    }

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
async def generate_admin_panel_text(stats):
    return f"""
<b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:</b> {stats['subscription_price']}$
    
<b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>
- /give –∞–π–¥–∏_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–Ω–µ–π - –≤—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
- /price —Ü–µ–Ω–∞ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>
- –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π: {stats['total_subscriptions']}
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º –±–∏–∑–Ω–µ—Å-–±–æ—Ç–æ–º: {stats['total_users_with_active_business_bot']}
- –í—Å–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}
- –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_edited_messages']}
- –£–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_deleted_messages']}
"""

# –•—ç–Ω–¥–ª–µ—Ä—ã
@admin_router.message(F.text == "/admin")
async def admin_panel(message: Message):
    try:
        stats = await get_cached_statistics()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        text = await generate_admin_panel_text(stats)
        await message.answer(text, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

@admin_router.message(F.text.startswith("/give"))
async def give_subscription(message: Message):
    try:
        args = message.text.split()
        if len(args) != 3:
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /give –∞–π–¥–∏_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–Ω–µ–π")
            return

        request = GiveSubscriptionRequest(user_id=int(args[1]), days=int(args[2]))

        if await db.get_user(request.user_id) is None:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        await db.create_subscription(user_telegram_id=request.user_id, end_date=datetime.now() + timedelta(days=request.days))
        await message.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {request.user_id} –Ω–∞ {request.days} –¥–Ω–µ–π.")
    except ValueError as e:
        await message.answer(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏.")

@admin_router.message(F.text.startswith("/price"))
async def set_subscription_price(message: Message):
    try:
        args = message.text.split()
        if len(args) != 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /price —Ü–µ–Ω–∞")
            return

        request = SetPriceRequest(price=float(args[1]))
        await db.set_subscription_price(request.price)
        await message.answer(f"–¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {request.price}$.")
    except ValueError as e:
        await message.answer(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏.")
@admin_router.message(Command("reset_channels"))
async def reset_channels(message: Message):
    try:
        await db.reset_channel_indexes()
        await message.answer("–ò–Ω–¥–µ–∫—Å—ã –∫–∞–Ω–∞–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
