import re
import asyncio
import logging
import pytz
from datetime import datetime
from aiogram import Router, F, Bot
from aiogram.filters import CommandStart
from aiogram.types import Message, BusinessConnection, BusinessMessagesDeleted
import random
import asyncio
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.context import FSMContext
from apscheduler.schedulers.asyncio import AsyncIOScheduler # Added import for scheduler

import bot.database.database as db
import bot.assets.texts as texts
import bot.keyboards.user as kb

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

business_router = Router()

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
math_expression_pattern = re.compile(r'^–ö–∞–ª—å–∫ [\d+\-*/(). ]+$')



async def handle_math_expression(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π."""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    connection = await message.bot.get_business_connection(message.business_connection_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.from_user.id != connection.user.id:
        return

    expression = message.text[len("–ö–∞–ª—å–∫ "):].strip()
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        calc_message = await message.bot.send_message(chat_id=message.chat.id, text="üîÑ –°—á–∏—Ç–∞—é...")

        # –ê–Ω–∏–º–∞—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        animations = [
            "üßÆ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤—ã—Ä–∞–∂–µ–Ω–∏–µ...",
            "üìä –í—ã–ø–æ–ª–Ω—è—é –≤—ã—á–∏—Å–ª–µ–Ω–∏—è...",
            "‚ö°Ô∏è –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ..."
        ]

        for anim in animations:
            await asyncio.sleep(0.5)
            await calc_message.edit_text(anim)

        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = eval(expression)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if isinstance(result, (int, float)):
            formatted_result = f"{result:,}".replace(",", " ")
        else:
            formatted_result = str(result)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        final_text = f"‚ú® –í—ã—Ä–∞–∂–µ–Ω–∏–µ: {expression}\nüí´ –†–µ–∑—É–ª—å—Ç–∞—Ç: {formatted_result}"
        await calc_message.edit_text(final_text, reply_to_message_id=message.message_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await calc_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è")

async def handle_love_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã 'love'."""
    sent_message = await message.answer("–Ø")
    for text in ["–Ø —Ö–æ—á—É", "–Ø —Ö–æ—á—É —Å–∫–∞–∑–∞—Ç—å", "–Ø —Ö–æ—á—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ", "–Ø —Ö–æ—á—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —è", "–Ø —Ö–æ—á—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —è –ª—é–±–ª—é", "–Ø —Ö–æ—á—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —è –ª—é–±–ª—é —Ç–µ–±—è üíñ"]:
        await asyncio.sleep(1)
        await sent_message.edit_text(text)

async def handle_love1_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã 'love1'."""
    original_text = "1234567890"
    target_text = "–Ø–õ—é–±–ª—é–¢–µ–±—è"
    sent_message = await message.answer(original_text)
    for i in range(len(target_text)):
        new_text = target_text[:i + 1] + original_text[i + 1:]
        await asyncio.sleep(0.10)
        await sent_message.edit_text(new_text)



@business_router.business_connection()
async def business_connection(event: BusinessConnection):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–±–æ—Ç–∞."""
    try:
        if event.is_enabled:
            user = await db.get_user(telegram_id=event.user.id)
            if user is None:
                await db.create_user(telegram_id=event.user.id, business_bot_active=True)
            else:
                await db.update_user_business_bot_active(telegram_id=event.user.id, business_bot_active=True)
            try:
                await event.bot.send_message(event.user.id, texts.Texts.CONNECTION_ENABLED, reply_markup=kb.start_connection_keyboard)
            except Exception as send_error:
                if "bot was blocked by the user" in str(send_error):
                    await db.update_user_business_bot_active(telegram_id=event.user.id, business_bot_active=False)
                    logger.warning(f"User {event.user.id} blocked the bot")
                else:
                    raise send_error
        else:
            await db.update_user_business_bot_active(telegram_id=event.user.id, business_bot_active=False)
            try:
                await event.bot.send_message(event.user.id, texts.Texts.CONNECTION_DISABLED)
            except Exception as send_error:
                if "bot was blocked by the user" not in str(send_error):
                    raise send_error
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

@business_router.business_message()
async def business_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–π."""
    try:
        connection = await message.bot.get_business_connection(message.business_connection_id)
        user = await db.get_user(telegram_id=connection.user.id)
        if not user:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        if not user.subscription_end_date or user.subscription_end_date < datetime.now():
            await message.answer("‚ùå –¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!\n\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
            return
        text_1 = f"üë§ –û—Ç: {connection.user.first_name}"
        text_2 = texts.Texts.new_message_text(name=message.from_user.first_name, user_id=message.from_user.id, username=message.from_user.username)

        update = {}
        if message.entities:
            update["entities"] = [entity.model_copy(update={"length": entity.length + len(text_1)}) for entity in message.entities]
        elif message.caption_entities:
            update["caption_entities"] = [entity.model_copy(update={"length": entity.length + len(text_1)}) for entity in message.caption_entities]

        # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª–µ–π
        sender_name = message.from_user.first_name
        if message.from_user.last_name:
            sender_name += f" {message.from_user.last_name}"
        elif message.from_user.username:
            sender_name = message.from_user.username

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ –∏–∑ connection
        receiver_name = connection.user.first_name
        if connection.user.last_name:
            receiver_name += f" {connection.user.last_name}"
        elif connection.user.username:
            receiver_name = connection.user.username

        if not receiver_name:
            receiver_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

        # –°–æ–∑–¥–∞–µ–º HTML-—Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É—á–µ—Ç–æ–º username
        sender_username = message.from_user.username
        receiver_username = connection.user.username

        sender_url = f'https://t.me/{sender_username}' if sender_username else f'tg://user?id={message.from_user.id}'
        receiver_url = f'https://t.me/{receiver_username}' if receiver_username else f'tg://user?id={connection.user.id}'

        sender_link = f'<a href="{sender_url}">{sender_name}</a>'
        receiver_link = f'<a href="{receiver_url}">{receiver_name}</a>'
        header = f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüëâ –û—Ç: {sender_link}\nüë§ –ö–æ–º—É: {receiver_link}\n\n"

        if message.caption:
            update["caption"] = f"{header}{message.caption}"
        elif message.html_text:
            update["text"] = f"{header}{message.html_text}"
        elif message.voice or message.video_note or message.video:
            if message.voice:
                media_type = "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            elif message.video_note:
                media_type = "üé• –í–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫"
            else:
                media_type = "üìπ –í–∏–¥–µ–æ"
            update["caption"] = f"{header}{media_type}"

        message_copy_model = message.model_copy(update=update)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        CHANNELS = {
            'voice': -1002300596890,
            'photo': -1002498479494,
            'video_note': -1002395727554,
            'video': -1002321264660,
            'text': [-1002467764642, -1002353748102, -1002460477207],
            'default': -1002467764642  # –†–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
        if not hasattr(business_message, '_channels_cache'):
            business_message._channels_cache = CHANNELS

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        user = await db.get_user(telegram_id=connection.user.id)
        if user is None:
            user = await db.create_user(telegram_id=connection.user.id, business_bot_active=True)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–∞–Ω–∞–ª
        message_type = next((type_ for type_ in ['voice', 'video_note', 'video', 'photo']
                           if hasattr(message, type_) and getattr(message, type_)), 'text')

        target_channel = None
        try:
            if message_type == 'text':
                channel_index = user.channel_index % len(CHANNELS['text'])
                target_channel = CHANNELS['text'][channel_index]
            else:
                target_channel = CHANNELS[message_type]

            if not target_channel:
                raise ValueError("–ö–∞–Ω–∞–ª –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")

            # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            for attempt in range(3):  # –î–µ–ª–∞–µ–º 3 –ø–æ–ø—ã—Ç–∫–∏
                try:
                    temp_message = await message_copy_model.send_copy(
                        chat_id=target_channel,
                        parse_mode=ParseMode.HTML
                    )
                    if temp_message:
                        break
                except Exception as e:
                    if attempt == 2:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                        raise e
                    await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π

            if not temp_message:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                temp_message = await message_copy_model.send_copy(
                    chat_id=CHANNELS['text'][0],
                    parse_mode=ParseMode.HTML
                )
            except Exception as backup_error:
                logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {str(backup_error)}")
                return
        message_new = temp_message
        await db.create_message(user_telegram_id=connection.user.id, chat_id=message.chat.id, from_user_id=message.from_user.id, message_id=message.message_id, temp_message_id=message_new.message_id)
        await db.increase_active_messages_count(user_telegram_id=connection.user.id)
        await db.increment_messages_count(from_user_id=message.from_user.id, to_user_id=connection.user.id)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥—É–ª–µ–π
        if message.text:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É "–û–Ω–ª–∞–π–Ω+"
            if message.text.strip() == "–û–Ω–ª–∞–π–Ω+":
                chat_id = message.chat.id
                if chat_id in online_tasks:
                    # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë
                    online_tasks[chat_id].cancel()
                    del online_tasks[chat_id]
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
                    task = asyncio.create_task(send_online_status(message, chat_id, connection))
                    online_tasks[chat_id] = task
                return

            if math_expression_pattern.match(message.text):
                if not user.calc_enabled:
                    return
                await handle_math_expression(message)
            elif message.text.strip().lower() in ["love", "love1"]:
                if not user.love_enabled:
                    return
                if message.text.strip().lower() == "love":
                    await handle_love_command(message)
                else:
                    await handle_love1_command(message)


    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@business_router.deleted_business_messages()
async def deleted_business_messages(event: BusinessMessagesDeleted):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–π."""
    try:
        connection = await event.bot.get_business_connection(event.business_connection_id)
        for message_id in event.message_ids:
                message_old = await db.get_message(message_id)
                if message_old:
                    await db.increase_deleted_messages_count(user_telegram_id=connection.user.id)
                    current_time = datetime.now().strftime("%H:%M:%S")
                    username = event.chat.username if event.chat.username else event.chat.first_name
                    user_link = f'<a href="tg://user?id={event.chat.id}">{username}</a>'

                    deleted_text = ""
                    if message_old and message_old.temp_message_id:
                        try:
                            # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –≥–¥–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                            channels = [-1002467764642, -1002353748102, -1002460477207, -1002300596890, -1002498479494, -1002395727554, -1002321264660]
                            message_found = False

                            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                            for channel in channels:
                                try:
                                    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                    await event.bot.copy_message(
                                        chat_id=connection.user.id,
                                        from_chat_id=channel,
                                        message_id=message_old.temp_message_id
                                    )
                                    message_found = True

                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
                                    username = event.chat.username if event.chat.username else event.chat.first_name
                                    user_link = f'<a href="tg://user?id={event.chat.id}">{username}</a>'
                                    info_text = f"üóë {user_link} —É–¥–∞–ª–∏–ª —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n‚è∞ –í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è: {current_time}"
                                    await event.bot.send_message(
                                        chat_id=connection.user.id,
                                        text=info_text,
                                        parse_mode=ParseMode.HTML
                                    )
                                    break
                                except Exception:
                                    continue

                            if not message_found:
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                                text = f"üóë {user_link} —É–¥–∞–ª–∏–ª –¥–ª—è —Ç–µ–±—è —Å–æ–æ–±—â–µ–Ω–∏–µ\n‚è∞ –í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è: {current_time}\n‚ö†Ô∏è –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                                await event.bot.send_message(
                                    chat_id=connection.user.id,
                                    text=text,
                                    parse_mode=ParseMode.HTML
                                )

                        except Exception as e:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                            text = f"üóë {user_link} —É–¥–∞–ª–∏–ª –¥–ª—è —Ç–µ–±—è —Å–æ–æ–±—â–µ–Ω–∏–µ\n‚è∞ –í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è: {current_time}"
                            await event.bot.send_message(
                                chat_id=connection.user.id,
                                text=text,
                                parse_mode=ParseMode.HTML
                            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")


async def check_inactive_chats(bot: Bot): # Placeholder function
    """Checks for inactive chats and sends notifications (implementation needed)."""
    #  This function requires implementation details based on your specific requirements.
    #  It should query the database for inactive chats and send appropriate notifications using the bot.
    pass


from config import BOT_TOKEN, HISTORY_GROUP_ID

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞—Å–∫–æ–≤ –æ–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—É—Å–∞
online_tasks = {}

async def send_online_status(message: Message, chat_id: int, connection: BusinessConnection):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–ª–∞–π–Ω"""
    try:
        await message.answer("‚úÖ –û–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        while True:
            try:
                moscow_tz = datetime.now().astimezone(pytz.timezone('Europe/Moscow'))
                current_time = moscow_tz.strftime("%H:%M:%S")
                formatted_message = f"üì± –û–Ω–ª–∞–π–Ω | ‚è∞ {current_time} –ú–°–ö"
                await message.answer(text=formatted_message)
                await asyncio.sleep(5)
            except asyncio.CancelledError:
                await message.answer("‚ùå –û–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                if chat_id in online_tasks:
                    del online_tasks[chat_id]
                return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞: {e}")
                if chat_id in online_tasks:
                    del online_tasks[chat_id]
                return
    except Exception as e:
        logger.error(f"–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞: {e}")
        if chat_id in online_tasks:
            del online_tasks[chat_id]

@business_router.message(F.text.casefold().in_({"–æ–Ω–ª–∞–π–Ω+", "–æ–Ω–ª–∞–π–Ω-", "–æ–Ω–ª+", "–æ–Ω–ª-"}))
async def handle_online_status(message: Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞
        connection = await message.bot.get_business_connection(message.business_connection_id)
        if not connection or connection.user.id != message.from_user.id:
            return
            
        user = await db.get_user(message.from_user.id)
        if not user or not user.online_enabled:
            return

        chat_id = message.chat.id

        command = message.text.lower().strip()
        if command in ["–æ–Ω–ª–∞–π–Ω+", "–æ–Ω–ª+"]:
            if chat_id in online_tasks:
                online_tasks[chat_id].cancel()
            task = asyncio.create_task(send_online_status(message, chat_id, connection))
            online_tasks[chat_id] = task
            await message.answer("‚úÖ –û–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        elif command in ["–æ–Ω–ª–∞–π–Ω-", "–æ–Ω–ª-"]:
            if chat_id in online_tasks:
                online_tasks[chat_id].cancel()
                del online_tasks[chat_id]
                await message.answer("‚ùå –û–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞: {e}")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        user = await db.get_user(telegram_id=message.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –º–æ–¥—É–ª—è
        if not user or not user.subscription_end_date or user.subscription_end_date < datetime.now():
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏!")
            return

        if not user.online_enabled:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω –ª–∏ –º–æ–¥—É–ª—å
            await message.answer("‚ùå –ú–æ–¥—É–ª—å –æ–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∫–ª—é—á–µ–Ω!")
            return

        chat_id = message.chat.id  # ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
        connection = await message.bot.get_business_connection(message.business_connection_id)

        if message.text in ["–û–Ω–ª–∞–π–Ω+", "–û–Ω–ª+"]:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞—Å–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
            if chat_id in online_tasks and not online_tasks[chat_id].done():
                online_tasks[chat_id].cancel()

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞—Å–∫
            task = asyncio.create_task(send_online_status(message, chat_id, connection))
            online_tasks[chat_id] = task
            await message.answer("‚úÖ –û–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            return  # –î–æ–±–∞–≤–ª–µ–Ω return –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        
        elif message.text in ["–û–Ω–ª–∞–π–Ω-", "–û–Ω–ª-"]:
            if chat_id in online_tasks:
                task = online_tasks[chat_id]
                task.cancel()  # –°—Ä–∞–∑—É –æ—Ç–º–µ–Ω—è–µ–º —Ç–∞—Å–∫
                del online_tasks[chat_id]  # –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                await message.answer("‚ùå –û–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            return

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–ª–∞–π–Ω")

async def main():
    dp = Dispatcher()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    scheduler = AsyncIOScheduler()
    scheduler.add_job(check_inactive_chats, 'interval', hours=1) # Removed args=[bot] because it wasn't defined here.  This may need adjustment based on your bot instantiation
    scheduler.start()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    root_logger = logging.getLogger()
    # ... rest of the main function ...