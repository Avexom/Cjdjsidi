import re
import asyncio
import logging
from datetime import datetime
from aiogram import Router, F, Bot
from aiogram.filters import CommandStart
from aiogram.types import Message, BusinessConnection, BusinessMessagesDeleted
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.context import FSMContext

import bot.database.database as db
import bot.assets.texts as texts
import bot.keyboards.user as kb

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

business_router = Router()

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
math_expression_pattern = re.compile(r'^–ö–∞–ª—å–∫ [\d+\-*/(). ]+$')

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
online_notification_users = {}

async def handle_math_expression(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π."""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    connection = await message.bot.get_business_connection(message.business_connection_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.from_user.id != connection.user.id:
        return

    expression = message.text[len("–ö–∞–ª—å–∫ "):].strip()
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        calc_message = await message.answer("üîÑ –°—á–∏—Ç–∞—é...")

        # –ê–Ω–∏–º–∞—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        animations = [
            "üßÆ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤—ã—Ä–∞–∂–µ–Ω–∏–µ...",
            "üìä –í—ã–ø–æ–ª–Ω—è—é –≤—ã—á–∏—Å–ª–µ–Ω–∏—è...",
            "‚ö°Ô∏è –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ..."
        ]

        for anim in animations:
            await asyncio.sleep(0.5)
            await calc_message.edit_text(anim)

        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = eval(expression)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if isinstance(result, (int, float)):
            formatted_result = f"{result:,}".replace(",", " ")
        else:
            formatted_result = str(result)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        final_text = f"‚ú® –í—ã—Ä–∞–∂–µ–Ω–∏–µ: {expression}\nüí´ –†–µ–∑—É–ª—å—Ç–∞—Ç: {formatted_result}"
        await calc_message.edit_text(final_text, reply_to_message_id=message.message_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await calc_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è")

async def handle_love_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã 'love'."""
    sent_message = await message.answer("–Ø")
    for text in ["–Ø —Ö–æ—á—É", "–Ø —Ö–æ—á—É —Å–∫–∞–∑–∞—Ç—å", "–Ø —Ö–æ—á—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ", "–Ø —Ö–æ—á—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —è", "–Ø —Ö–æ—á—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —è –ª—é–±–ª—é", "–Ø —Ö–æ—á—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —è –ª—é–±–ª—é —Ç–µ–±—è üíñ"]:
        await asyncio.sleep(1)
        await sent_message.edit_text(text)

async def handle_love1_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã 'love1'."""
    original_text = "1234567890"
    target_text = "–Ø–õ—é–±–ª—é–¢–µ–±—è"
    sent_message = await message.answer(original_text)
    for i in range(len(target_text)):
        new_text = target_text[:i + 1] + original_text[i + 1:]
        await asyncio.sleep(0.10)
        await sent_message.edit_text(new_text)

async def handle_online_plus_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '–û–Ω–ª–∞–π–Ω+'."""
    user_id = message.from_user.id
    online_notification_users[user_id] = True
    await message.answer("–¢–µ–ø–µ—Ä—å —è –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å, –∫–æ–≥–¥–∞ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–π–¥—ë—Ç –≤ —Å–µ—Ç—å.")

async def handle_online_minus_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '–û–Ω–ª–∞–π–Ω-'."""
    user_id = message.from_user.id
    if user_id in online_notification_users:
        del online_notification_users[user_id]
        await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –æ–Ω–ª–∞–π–Ω –æ—Ç–º–µ–Ω–µ–Ω—ã.")
    else:
        await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤–∞—Å –Ω–µ –±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã.")

@business_router.business_connection()
async def business_connection(event: BusinessConnection):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–±–æ—Ç–∞."""
    try:
        if event.is_enabled:
            user = await db.get_user(telegram_id=event.user.id)
            if user is None:
                await db.create_user(telegram_id=event.user.id, business_bot_active=True)
            else:
                await db.update_user_business_bot_active(telegram_id=event.user.id, business_bot_active=True)
            await event.bot.send_message(event.user.id, texts.connection_enabled, reply_markup=kb.start_connection_keyboard)
        else:
            await db.update_user_business_bot_active(telegram_id=event.user.id, business_bot_active=False)
            await event.bot.send_message(event.user.id, texts.connection_disabled)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

@business_router.business_message()
async def business_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–π."""
    try:
        connection = await message.bot.get_business_connection(message.business_connection_id)
        text_1 = texts.new_message_text_2(name=connection.user.first_name, user_id=connection.user.id, username=connection.user.username)
        text_2 = texts.new_message_text(name=message.from_user.first_name, user_id=message.from_user.id, username=message.from_user.username)

        update = {}
        if message.entities:
            update["entities"] = [entity.model_copy(update={"length": entity.length + len(text_1)}) for entity in message.entities]
        elif message.caption_entities:
            update["caption_entities"] = [entity.model_copy(update={"length": entity.length + len(text_1)}) for entity in message.caption_entities]

        if message.caption:
            update["caption"] = f"{text_1}\n{text_2}\n\n{message.caption}"
        elif message.html_text:
            update["text"] = f"{text_1}\n{text_2}\n\n{message.html_text}"

        message_copy_model = message.model_copy(update=update)

        # Define target channels
        VOICE_CHANNEL = -1002300596890
        PHOTO_CHANNEL = -1002498479494
        VIDEO_MSG_CHANNEL = -1002395727554
        VIDEO_FILE_CHANNEL = -1002321264660
        TEXT_CHANNELS = [-1002467764642, -1002353748102, -1002460477207]

        target_channel = None

        # Get user from database
        user = await db.get_user(telegram_id=connection.user.id)
        if user is None:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            user = await db.create_user(telegram_id=connection.user.id, business_bot_active=True)

        # Determine target channel based on message type
        if hasattr(message, 'voice') and message.voice:
            target_channel = VOICE_CHANNEL
        elif hasattr(message, 'video_note') and message.video_note:
            target_channel = VIDEO_MSG_CHANNEL
        elif hasattr(message, 'video') and message.video:
            target_channel = VIDEO_FILE_CHANNEL
        elif hasattr(message, 'photo') and message.photo:
            target_channel = PHOTO_CHANNEL
        elif hasattr(message, 'text') and message.text and TEXT_CHANNELS:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π channel_index –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            channel_index = user.channel_index % len(TEXT_CHANNELS)
            # –í—ã–±–∏—Ä–∞–µ–º –∫–∞–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–µ–∫—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            target_channel = TEXT_CHANNELS[channel_index]
        else:
            # –ï—Å–ª–∏ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª
            target_channel = TEXT_CHANNELS[0]

        # Forward message to appropriate channel
        if target_channel:
            temp_message = await message_copy_model.send_copy(
                chat_id=target_channel,
                parse_mode=ParseMode.HTML
            )
        else:
            logger.error("–¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
            return
        message_new = temp_message
        await db.create_message(user_telegram_id=connection.user.id, chat_id=message.chat.id, from_user_id=message.from_user.id, message_id=message.message_id, temp_message_id=message_new.message_id)
        await db.increase_active_messages_count(user_telegram_id=connection.user.id)
        await db.increment_messages_count(from_user_id=message.from_user.id, to_user_id=connection.user.id)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        if message.text:
            if math_expression_pattern.match(message.text):
                await handle_math_expression(message)
            elif message.text.strip().lower() == "love":
                await handle_love_command(message)
            elif message.text.strip().lower() == "love1":
                await handle_love1_command(message)
            elif message.text.strip().lower() == "–æ–Ω–ª–∞–π–Ω+":
                await handle_online_plus_command(message)
            elif message.text.strip().lower() == "–æ–Ω–ª–∞–π–Ω-":
                await handle_online_minus_command(message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@business_router.deleted_business_messages()
async def deleted_business_messages(event: BusinessMessagesDeleted):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–π."""
    try:
        connection = await event.bot.get_business_connection(event.business_connection_id)
        subscription = await db.get_subscription(user_telegram_id=connection.user.id)
        if subscription is None:
            await event.bot.send_message(
                chat_id=connection.user.id,
                text="üîî –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ, –Ω–æ –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è! üóëÔ∏è"
            )
        else:
            for message_id in event.message_ids:
                message_old = await db.get_message(message_id)
                if message_old:
                    await db.increase_deleted_messages_count(user_telegram_id=connection.user.id)
                    current_time = datetime.now().strftime("%H:%M:%S")
                    username = event.chat.username if event.chat.username else event.chat.first_name
                    user_link = f'<a href="tg://user?id={event.chat.id}">{username}</a>'
                    deleted_text = ""

                    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    channels = [-1002467764642, -1002353748102, -1002460477207, -1002300596890, -1002498479494, -1002395727554, -1002321264660]

                    try:
                        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
                        for channel_id in channels:
                            try:
                                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                                msg = await event.bot.forward_message(
                                    chat_id=connection.user.id,
                                    from_chat_id=channel_id,
                                    message_id=message_old.temp_message_id
                                )
                                if msg:
                                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –µ–≥–æ
                                    forwarded = await event.bot.forward_messages(
                                        chat_id=connection.user.id,
                                        from_chat_id=channel_id,
                                        message_ids=message_old.temp_message_id
                                    )
                                    deleted_content = ""
                                    if hasattr(forwarded, 'text') and forwarded.text:
                                        deleted_content = forwarded.text
                                    elif hasattr(forwarded, 'caption') and forwarded.caption:
                                        deleted_content = forwarded.caption

                                    if deleted_content:
                                        deleted_text = f"\n\n–£–¥–∞–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n<i>{deleted_content}</i>"

                                    try:
                                        # –£–¥–∞–ª—è–µ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                        await event.bot.delete_message(chat_id=connection.user.id, message_id=msg.message_id)
                                    except Exception as delete_error:
                                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {delete_error}")
                                    break
                            except Exception as channel_error:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id}: {channel_error}")
                                continue
                    except Exception as e:
                        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

                    text = f"üóë {user_link} —É–¥–∞–ª–∏–ª –¥–ª—è —Ç–µ–±—è —Å–æ–æ–±—â–µ–Ω–∏–µ{deleted_text}\n‚è∞ –í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è: {current_time}"
                    await event.bot.send_message(
                        chat_id=connection.user.id,
                        text=text,
                        parse_mode=ParseMode.HTML
                    )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

@business_router.edited_business_message()
async def edited_business_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–π."""
    try:
        connection = await message.bot.get_business_connection(message.business_connection_id)
        subscription = await db.get_subscription(user_telegram_id=connection.user.id)
        if subscription is None:
            await message.bot.send_message(
                chat_id=connection.user.id,
                text="üîî –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ, –Ω–æ –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏! ‚úèÔ∏è"
            )

        message_old = await db.get_message(message.message_id)
        if message_old:
            text_1 = texts.edited_message_text(name=message.from_user.first_name, user_id=message_old.from_user_id, username=message.from_user.username)
            update = {}
            if message.entities:
                update["entities"] = [entity.model_copy(update={"length": entity.length + len(text_1)}) for entity in message.entities]
            elif message.caption_entities:
                update["caption_entities"] = [entity.model_copy(update={"length": entity.length + len(text_1)}) for entity in message.caption_entities]
            if message.caption:
                update["caption"] = f"{text_1}\n\n{message.caption}"
            elif message.html_text:
                update["text"] = f"{text_1}\n\n{message.html_text}"

            message_copy_model = message.model_copy(update=update)
            temp_message = await message_copy_model.send_copy(chat_id=HISTORY_GROUP_ID, parse_mode=ParseMode.HTML)

            if subscription is not None:
                await db.increase_edited_messages_count(user_telegram_id=message_old.user_telegram_id)
                await db.add_message_edit_history(user_telegram_id=message_old.user_telegram_id, message_id=message.message_id, chat_id=message.chat.id, from_user_id=message.from_user.id, temp_message_id=temp_message.message_id, date=datetime.now())
                await message.bot.copy_message(chat_id=message_old.user_telegram_id, from_chat_id=HISTORY_GROUP_ID, message_id=temp_message.message_id, reply_markup=kb.get_show_history_message_keyboard(message.message_id))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def track_user_online_status(bot: Bot):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    while True:
        for user_id in list(online_notification_users.keys()):
            try:
                user_status = await bot.get_chat_member(user_id, user_id)
                if user_status.status == "online":
                    await bot.send_message(chat_id=user_id, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏ '–û–Ω–ª–∞–π–Ω+', —Å–µ–π—á–∞—Å –≤ —Å–µ—Ç–∏!")
                    del online_notification_users[user_id]
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                if user_id in online_notification_users:
                    del online_notification_users[user_id]
        await asyncio.sleep(10)

async def start_tracking(bot: Bot):
    """–ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    asyncio.create_task(track_user_online_status(bot))

from config import BOT_TOKEN, HISTORY_GROUP_ID