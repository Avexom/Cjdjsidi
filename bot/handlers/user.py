from aiogram import Router, F, Bot, BaseMiddleware
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, TelegramObject
from aiogram.exceptions import TelegramBadRequest
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
import logging
from pydantic import BaseModel, PositiveInt
from async_lru import alru_cache  # –ò—Å–ø–æ–ª—å–∑—É–µ–º async_lru –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è

import bot.database.database as db
import bot.assets.texts as texts
import bot.keyboards.user as kb
#from config import HISTORY_GROUP_ID # Removed
from bot.services.payments import create_invoice, check_payment, delete_invoice

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

user_router = Router()

# –ú–æ–¥–µ–ª–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
class PaymentRequest(BaseModel):
    invoice_id: PositiveInt

# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: TelegramObject, data: dict):
        user = await db.get_user(telegram_id=event.from_user.id)
        if user is None:
            logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {event.from_user.id}")
            await event.answer(texts.Texts.START_NOT_CONNECTED)
            return
        data["user"] = user
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event.from_user.id} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
        return await handler(event, data)

user_router.message.middleware(UserMiddleware())

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
@alru_cache(maxsize=1)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º async_lru –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
async def get_cached_subscription_price():
    return await db.get_subscription_price()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
async def get_user_profile_text(user, subscription, message):
    return texts.profile_text(
        user_id=user.telegram_id,
        name=message.from_user.first_name,
        subscription_end_date=subscription.end_date if subscription else None,
        count_messages=user.active_messages_count,
        count_messages_deleted=user.deleted_messages_count,
        count_messages_edited=user.edited_messages_count
    )

# –•—ç–Ω–¥–ª–µ—Ä—ã
@user_router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await state.clear()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    user = await db.get_user(telegram_id=message.from_user.id)
    if user is None:
        await message.answer(texts.about_bot, parse_mode=ParseMode.HTML)
    elif user.business_bot_active:
        await message.answer(texts.Texts.START_CONNECTED, reply_markup=kb.start_connection_keyboard)
    else:
        await message.answer(texts.start_not_connected)

@user_router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: Message, user: dict):
    await message.delete()
    subscription = await db.get_subscription(user_telegram_id=message.from_user.id)
    text = await get_user_profile_text(user, subscription, message)
    await message.answer(text=text, reply_markup=kb.profile_keyboard)

@user_router.message(F.text == "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def buy_subscription(message: Message, user: dict):
    await message.delete()
    subscription = await db.get_subscription(user_telegram_id=message.from_user.id)
    if subscription:
        await message.answer(text=texts.Texts.SUBSCRIPTION_BUY_ALREADY_ACTIVE, reply_markup=kb.close_keyboard)
    else:
        me = await message.bot.me()
        price = await get_cached_subscription_price()
        payment_data = await create_invoice(float(price), message.from_user.id, me.username)

        await message.answer(
            text=texts.subscription_buy_text(price=price),
            reply_markup=kb.get_payment_keyboard(payment_data["pay_url"], payment_data["invoice_id"])
        )

@user_router.callback_query(F.data.startswith("check_payment_"))
async def check_payment_handler(callback: CallbackQuery):
    try:
        invoice_id = int(callback.data.split("_")[-1])
        request = PaymentRequest(invoice_id=invoice_id)

        is_paid = await check_payment(request.invoice_id)
        if is_paid:
            await db.create_subscription(user_telegram_id=callback.from_user.id, end_date=datetime.now() + timedelta(days=30))
            await callback.answer(text=texts.subscription_buy_success)
            await callback.message.edit_text(text=texts.subscription_buy_success_text)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É.")
        else:
            await callback.answer(text=texts.subscription_buy_failed)
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–µ –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É.")
    except ValueError as e:
        await callback.answer(text=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")

@user_router.callback_query(F.data.startswith("delete_invoice_"))
async def delete_invoice_handler(callback: CallbackQuery):
    try:
        await callback.answer()
        await callback.message.delete()
        invoice_id = int(callback.data.split("_")[-1])
        await delete_invoice(invoice_id)
    except ValueError as e:
        await callback.answer(text=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {e}")
        await callback.answer(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞.")

@user_router.callback_query(F.data.startswith("show_history_"))
async def show_history(callback: CallbackQuery):
    try:
        subscription = await db.get_subscription(user_telegram_id=callback.from_user.id)
        if subscription is None:
            await callback.answer(text=texts.subscription_ended, show_alert=True)
            return

        message_id = callback.data.split("_")[-1]
        message_edit_history = await db.get_message_edit_history(message_id)

        if not message_edit_history or not message_edit_history.get('old_message'):
            await callback.answer("–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        old_message = message_edit_history['old_message']

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏
        sent_message = await callback.message.answer(
            text=f"–ò—Å—Ç–æ—Ä–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {old_message.message_id}",
            reply_markup=kb.close_keyboard
        )

        success = False
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            try:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
                channels = [-1002467764642, -1002353748102, -1002460477207, -1002300596890, -1002498479494, -1002395727554, -1002321264660]
                message_found = False

                for channel in channels:
                    try:
                        forwarded_message = await callback.bot.copy_message(
                            chat_id=callback.message.chat.id,
                            from_chat_id=channel,
                            message_id=old_message.temp_message_id
                        )
                        message_found = True
                        break
                    except Exception:
                        continue

                if message_found:
                    success = True
                else:
                    raise Exception("message not found")
                success = True
            except Exception as e:
                if "message to forward not found" in str(e):
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π
                    await sent_message.edit_text(
                        "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.\n–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:",
                        reply_markup=kb.close_keyboard
                    )
                    success = True  # –ü–æ–∑–≤–æ–ª—è–µ–º –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π
                else:
                    raise e

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if success and message_edit_history.get('message_edit_history'):
                for edit in message_edit_history['message_edit_history']:
                    try:
                        message_found = False
                        for channel in channels:
                            try:
                                await callback.bot.copy_message(
                                    chat_id=callback.message.chat.id,
                                    from_chat_id=channel,
                                    message_id=edit.temp_message_id
                                )
                                message_found = True
                                break
                            except Exception:
                                continue
                        if not message_found:
                            continue
                    except Exception:
                        continue
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            if not success:
                await sent_message.edit_text(
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                    reply_markup=kb.close_keyboard
                )

        # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤—ã—Ö
        await callback.message.delete()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await callback.answer(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏—Å—Ç–æ—Ä–∏–∏", show_alert=True)

@user_router.message(F.text == "‚öôÔ∏è –§—É–Ω–∫—Ü–∏–∏")
async def functions_menu(message: Message, user: dict):
    await message.delete()
    if not hasattr(functions_menu, 'menu_message'):
        text = (
            "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏—è–º–∏:\n\n"
            f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ –í–∫–ª' if user.notifications_enabled else '‚ùå –í—ã–∫–ª'}\n"
            f"üìù –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {'‚úÖ –í–∫–ª' if user.edit_notifications else '‚ùå –í—ã–∫–ª'}\n"
            f"üóë –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–π: {'‚úÖ –í–∫–ª' if user.delete_notifications else '‚ùå –í—ã–∫–ª'}"
        )
        functions_menu.menu_message = await message.answer(text=text, reply_markup=kb.functions_keyboard)
    else:
        try:
            new_text = (
                "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏—è–º–∏:\n\n"
                f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ –í–∫–ª' if user.notifications_enabled else '‚ùå –í—ã–∫–ª'}\n"
                f"üìù –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {'‚úÖ –í–∫–ª' if user.edit_notifications else '‚ùå –í—ã–∫–ª'}\n"
                f"üóë –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–π: {'‚úÖ –í–∫–ª' if user.delete_notifications else '‚ùå –í—ã–∫–ª'}"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç
            try:
                current_text = functions_menu.menu_message.text
                if current_text != new_text:
                    await functions_menu.menu_message.edit_text(text=new_text, reply_markup=kb.functions_keyboard)
            except:
                functions_menu.menu_message = await message.answer(text=new_text, reply_markup=kb.functions_keyboard)
        except Exception as e:
            functions_menu.menu_message = await message.answer(text=new_text, reply_markup=kb.functions_keyboard)

@user_router.callback_query(F.data.startswith("toggle_module_"))
async def toggle_module_handler(callback: CallbackQuery):
    module = callback.data.replace("toggle_module_", "")
    new_state = await db.toggle_module(callback.from_user.id, module)

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    updated_user = await db.get_user(telegram_id=callback.from_user.id)

    text = (
        "üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏:\n\n"
        f"üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä: {'‚úÖ –í–∫–ª' if updated_user.calc_enabled else '‚ùå –í—ã–∫–ª'}\n"
        f"‚ù§Ô∏è Love: {'‚úÖ –í–∫–ª' if updated_user.love_enabled else '‚ùå –í—ã–∫–ª'}"
    )

    try:
        await callback.message.edit_text(text=text, reply_markup=kb.modules_keyboard)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise

    await callback.answer(f"–ú–æ–¥—É–ª—å {'–≤–∫–ª—é—á–µ–Ω ‚úÖ' if new_state else '–≤—ã–∫–ª—é—á–µ–Ω ‚ùå'}")

@user_router.callback_query(F.data.startswith("toggle_"))
async def toggle_function(callback: CallbackQuery):
    function = callback.data.split("_", 1)[1]
    user = await db.get_user(telegram_id=callback.from_user.id)

    if function == "all_notifications":
        new_state = not user.notifications_enabled
        await db.toggle_notification(user.telegram_id, "notifications")
    elif function == "edit_tracking":
        new_state = not user.edit_notifications
        await db.toggle_notification(user.telegram_id, "edit")
    elif function == "delete_tracking":
        new_state = not user.delete_notifications
        await db.toggle_notification(user.telegram_id, "delete")
    else:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è")
        return

    await callback.answer(f"–§—É–Ω–∫—Ü–∏—è {'–≤–∫–ª—é—á–µ–Ω–∞ ‚úÖ' if new_state else '–≤—ã–∫–ª—é—á–µ–Ω–∞ ‚ùå'}")

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updated_user = await db.get_user(telegram_id=callback.from_user.id)

    new_text = (
        "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏—è–º–∏:\n\n"
        f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ –í–∫–ª' if updated_user.notifications_enabled else '‚ùå –í—ã–∫–ª'}\n"
        f"üìù –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {'‚úÖ –í–∫–ª' if updated_user.edit_notifications else '‚ùå –í—ã–∫–ª'}\n"
        f"üóë –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–π: {'‚úÖ –í–∫–ª' if updated_user.delete_notifications else '‚ùå –í—ã–∫–ª'}"
    )

    if callback.message.text != new_text:
        await callback.message.edit_text(text=new_text, reply_markup=kb.functions_keyboard)

@user_router.callback_query(F.data == "close")
async def close(callback: CallbackQuery):
    await callback.answer()
    await callback.message.delete()

@user_router.message(F.text == "üì± –ú–æ–¥—É–ª–∏")
async def modules_menu(message: Message, user: dict):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –º–æ–¥—É–ª–µ–π"""
    await message.delete()
    text = (
        "üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏:\n\n"
        f"üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä: {'‚úÖ –í–∫–ª' if user.calc_enabled else '‚ùå –í—ã–∫–ª'}\n"
        f"‚ù§Ô∏è Love: {'‚úÖ –í–∫–ª' if user.love_enabled else '‚ùå –í—ã–∫–ª'}"
    )
    await message.answer(text=text, reply_markup=kb.modules_keyboard)

@user_router.callback_query(F.data == "module_calc")
async def calculator_module(callback: CallbackQuery):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"""
    await callback.answer()
    await callback.message.edit_text(
        "üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ:\n–ö–∞–ª—å–∫ <–≤—ã—Ä–∞–∂–µ–Ω–∏–µ>\n\n–ü—Ä–∏–º–µ—Ä: –ö–∞–ª—å–∫ 2 + 2",
        reply_markup=kb.close_keyboard
    )

@user_router.callback_query(F.data == "module_love")
async def love_module(callback: CallbackQuery):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥—É–ª—å Love"""
    await callback.answer()
    await callback.message.edit_text(
        "‚ù§Ô∏è Love\n\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ:\nLove <–∏–º—è1> <–∏–º—è2>\n\n–ü—Ä–∏–º–µ—Ä: Love –ò–≤–∞–Ω –ú–∞—Ä–∏—è",
        reply_markup=kb.close_keyboard
    )

@user_router.message(F.text == "—Ç–µ—Å—Ç")
async def test(message: Message):
    await db.create_subscription(user_telegram_id=message.from_user.id, end_date=datetime.now() + timedelta(days=30))
    await message.answer(text="–ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")


@user_router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_user_stats(message: Message, user: dict):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await message.delete()
    stats = await db.get_user_stats(user.telegram_id)
    text = (
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['sent_messages']}\n"
        f"–ò–∑–º–µ–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['edited_messages']}\n"
        f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['deleted_messages']}\n"
        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {stats['registration_date']}"
    )
    await message.answer(text=text, reply_markup=kb.close_keyboard)

@user_router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await message.delete()
    text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"
    await message.answer(text=text, reply_markup=kb.settings_keyboard)

@user_router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_command(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    await message.delete()
    text = (
        "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "üë§ –ü—Ä–æ—Ñ–∏–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n"
        "‚ùì –ü–æ–º–æ—â—å - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É - –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É"
    )
    await message.answer(text=text, reply_markup=kb.close_keyboard)

@user_router.callback_query(F.data == "notifications_settings")
async def notification_settings(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    await callback.answer()
    user = await db.get_user(telegram_id=callback.from_user.id)
    text = (
        "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n"
        f"–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ' if user.notifications_enabled else '‚ùå'}\n"
        f"–ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {'‚úÖ' if user.message_notifications else '‚ùå'}\n"
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {'‚úÖ' if user.edit_notifications else '‚ùå'}\n"
        f"–£–¥–∞–ª–µ–Ω–∏–µ: {'‚úÖ' if user.delete_notifications else '‚ùå'}"
    )
    await callback.message.edit_text(text=text, reply_markup=kb.notifications_keyboard)

@user_router.callback_query(F.data == "back_to_settings")
async def back_to_settings(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    await callback.answer()
    text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"
    await callback.message.edit_text(text=text, reply_markup=kb.settings_keyboard)

@user_router.callback_query(F.data.startswith("toggle_notification_"))
async def toggle_notification(callback: CallbackQuery):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    notification_type = callback.data.split("_")[-1]
    current_state = await db.toggle_notification(callback.from_user.id, notification_type)
    await callback.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {'–≤–∫–ª—é—á–µ–Ω—ã' if current_state else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}")
    await notification_settings(callback)

@user_router.message(F.text.startswith("–ö–∞–ª—å–∫"))
async def calculator(message: Message, user: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    if not user.calc_enabled:
        await message.answer("‚ùå –ú–æ–¥—É–ª—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω. –í–∫–ª—é—á–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –º–æ–¥—É–ª–µ–π.")
        return