from aiogram import Router, F, Bot, BaseMiddleware
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, TelegramObject
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
import logging
from pydantic import BaseModel, PositiveInt
from async_lru import alru_cache  # –ò—Å–ø–æ–ª—å–∑—É–µ–º async_lru –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è

import bot.database.database as db
import bot.assets.texts as texts
import bot.keyboards.user as kb
#from config import HISTORY_GROUP_ID # Removed
from bot.services.payments import create_invoice, check_payment, delete_invoice

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

user_router = Router()

# –ú–æ–¥–µ–ª–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
class PaymentRequest(BaseModel):
    invoice_id: PositiveInt

# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: TelegramObject, data: dict):
        user = await db.get_user(telegram_id=event.from_user.id)
        if user is None:
            logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {event.from_user.id}")
            await event.answer(texts.start_not_connected)
            return
        data["user"] = user
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event.from_user.id} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
        return await handler(event, data)

user_router.message.middleware(UserMiddleware())

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
@alru_cache(maxsize=1)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º async_lru –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
async def get_cached_subscription_price():
    return await db.get_subscription_price()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
async def get_user_profile_text(user, subscription, message):
    return texts.profile_text(
        user_id=user.telegram_id,
        name=message.from_user.first_name,
        subscription_end_date=subscription.end_date if subscription else None,
        count_messages=user.active_messages_count,
        count_messages_deleted=user.deleted_messages_count,
        count_messages_edited=user.edited_messages_count
    )

# –•—ç–Ω–¥–ª–µ—Ä—ã
@user_router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await state.clear()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    user = await db.get_user(telegram_id=message.from_user.id)
    if user is None:
        await message.answer(texts.about_bot, parse_mode=ParseMode.HTML)
    elif user.business_bot_active:
        await message.answer(texts.start_connected, reply_markup=kb.start_connection_keyboard)
    else:
        await message.answer(texts.start_not_connected)

@user_router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: Message, user: dict):
    await message.delete()
    subscription = await db.get_subscription(user_telegram_id=message.from_user.id)
    text = await get_user_profile_text(user, subscription, message)
    await message.answer(text=text, reply_markup=kb.profile_keyboard)

@user_router.message(F.text == "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def buy_subscription(message: Message, user: dict):
    await message.delete()
    subscription = await db.get_subscription(user_telegram_id=message.from_user.id)
    if subscription:
        await message.answer(text=texts.Texts.SUBSCRIPTION_BUY_ALREADY_ACTIVE, reply_markup=kb.close_keyboard)
    else:
        me = await message.bot.me()
        price = await get_cached_subscription_price()
        payment_data = await create_invoice(float(price), message.from_user.id, me.username)

        await message.answer(
            text=texts.subscription_buy_text(price=price),
            reply_markup=kb.get_payment_keyboard(payment_data["pay_url"], payment_data["invoice_id"])
        )

@user_router.callback_query(F.data.startswith("check_payment_"))
async def check_payment_handler(callback: CallbackQuery):
    try:
        invoice_id = int(callback.data.split("_")[-1])
        request = PaymentRequest(invoice_id=invoice_id)

        is_paid = await check_payment(request.invoice_id)
        if is_paid:
            await db.create_subscription(user_telegram_id=callback.from_user.id, end_date=datetime.now() + timedelta(days=30))
            await callback.answer(text=texts.subscription_buy_success)
            await callback.message.edit_text(text=texts.subscription_buy_success_text)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É.")
        else:
            await callback.answer(text=texts.subscription_buy_failed)
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–µ –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É.")
    except ValueError as e:
        await callback.answer(text=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")

@user_router.callback_query(F.data.startswith("delete_invoice_"))
async def delete_invoice_handler(callback: CallbackQuery):
    try:
        await callback.answer()
        await callback.message.delete()
        invoice_id = int(callback.data.split("_")[-1])
        await delete_invoice(invoice_id)
    except ValueError as e:
        await callback.answer(text=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {e}")
        await callback.answer(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞.")

@user_router.callback_query(F.data.startswith("show_history_"))
async def show_history(callback: CallbackQuery):
    try:
        subscription = await db.get_subscription(user_telegram_id=callback.from_user.id)
        if subscription is None:
            await callback.answer(text=texts.subscription_ended, show_alert=True)
            return

        message_id = callback.data.split("_")[-1]
        message_edit_history = await db.get_message_edit_history(message_id)
        
        if not message_edit_history or not message_edit_history.get('old_message'):
            await callback.answer("–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
            
        old_message = message_edit_history['old_message']
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent_message = await callback.message.answer(
            text=f"–ò—Å—Ç–æ—Ä–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {old_message.message_id}",
            reply_markup=kb.close_keyboard
        )
        
        success = False
        try:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.bot.copy_message(
                chat_id=callback.message.chat.id,
                from_chat_id=old_message.chat_id,
                message_id=old_message.temp_message_id,
                reply_markup=kb.close_keyboard
            )
            success = True
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π
            if message_edit_history.get('message_edit_history'):
                for edit in message_edit_history['message_edit_history']:
                    try:
                        await callback.bot.copy_message(
                            chat_id=callback.message.chat.id,
                            from_chat_id=edit.chat_id,
                            message_id=edit.temp_message_id,
                            reply_markup=kb.close_keyboard
                        )
                    except Exception:
                        continue
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            if not success:
                await sent_message.edit_text(
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                    reply_markup=kb.close_keyboard
                )
        
        # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤—ã—Ö
        await callback.message.delete()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await callback.answer(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏—Å—Ç–æ—Ä–∏–∏", show_alert=True)

@user_router.callback_query(F.data == "close")
async def close(callback: CallbackQuery):
    await callback.answer()
    await callback.message.delete()

@user_router.message(F.text == "—Ç–µ—Å—Ç")
async def test(message: Message):
    await db.create_subscription(user_telegram_id=message.from_user.id, end_date=datetime.now() + timedelta(days=30))
    await message.answer(text="–ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")