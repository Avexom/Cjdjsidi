
import json
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
import logging
import colorlog
from bot.assets import texts

logger = colorlog.getLogger('bot')
from bot.database import database as db
from bot.keyboards import user as kb

user_router = Router()

@user_router.message(Command("start"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = await db.get_user(message.from_user.id)
        if not user:
            await db.create_user(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name
            )
            await message.answer(texts.Texts.START_NOT_CONNECTED)
        else:
            await message.answer(texts.Texts.START_CONNECTED, reply_markup=kb.start_connection_keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@user_router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ—Ñ–∏–ª—å"""
    try:
        user = await db.get_user(message.from_user.id)
        subscription = await db.get_subscription(message.from_user.id)
        if user:
            profile_text = texts.Texts.profile_text(
                name=message.from_user.first_name,
                user_id=message.from_user.id,
                subscription_end_date=subscription.end_date if subscription else None,
                count_messages=user.active_messages_count,
                count_messages_deleted=user.deleted_messages_count,
                count_messages_edited=user.edited_messages_count
            )
            await message.answer(profile_text, reply_markup=kb.profile_keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@user_router.message(F.text == "‚öôÔ∏è –§—É–Ω–∫—Ü–∏–∏")
async def functions_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –§—É–Ω–∫—Ü–∏–∏"""
    try:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=kb.functions_keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@user_router.message(F.text == "üì± –ú–æ–¥—É–ª–∏")
async def modules_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ú–æ–¥—É–ª–∏"""
    try:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=kb.modules_keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–æ–¥—É–ª–µ–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@user_router.callback_query(F.data == "close")
async def close_keyboard(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è"""
    await callback.message.delete()

@user_router.message(F.text == "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def buy_subscription(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        from bot.services.payments import create_invoice
        price = await db.get_subscription_price()
        payment_data = await create_invoice(price, message.from_user.id, message.bot.username)
        if not payment_data["invoice_id"]:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂")
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=kb.get_payment_keyboard(payment_url, invoice_id)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@user_router.callback_query(F.data.startswith("toggle_module_"))
async def toggle_module(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π"""
    try:
        module = callback.data.split("_")[-1]
        user = await db.get_user(callback.from_user.id)
        
        if module == "calc":
            new_state = not user.calc_enabled
            await db.update_user(callback.from_user.id, calc_enabled=new_state)
            status = "–≤–∫–ª—é—á–µ–Ω ‚úÖ" if new_state else "–≤—ã–∫–ª—é—á–µ–Ω ‚ùå"
            await callback.answer(f"–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä {status}")
            
        elif module == "love":
            new_state = not user.love_enabled
            await db.update_user(callback.from_user.id, love_enabled=new_state)
            status = "–≤–∫–ª—é—á–µ–Ω ‚úÖ" if new_state else "–≤—ã–∫–ª—é—á–µ–Ω ‚ùå"
            await callback.answer(f"–ú–æ–¥—É–ª—å Love {status}")
            
        await callback.message.edit_reply_markup(reply_markup=kb.modules_keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –º–æ–¥—É–ª—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")



