import json
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import logging
import colorlog
import asyncio
from bot.assets.texts import Texts

logger = colorlog.getLogger('bot')
from bot.database import database as db
from bot.keyboards import user as kb

user_router = Router()

@user_router.message(Command("start"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = await db.get_user(message.from_user.id)
        if not user:
            await db.create_user(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name
            )
            await message.answer(Texts.START_NOT_CONNECTED, reply_markup=kb.start_connection_keyboard)
        else:
            await message.answer(
                Texts.START_CONNECTED if user.business_bot_active else Texts.START_CONNECTED_NEW,
                reply_markup=kb.start_connection_keyboard
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@user_router.message(F.text.casefold() == "–æ–Ω–ª–∞–π–Ω+")
async def online_command(message: Message):

@user_router.callback_query(F.data == "close")
async def close_callback(callback: CallbackQuery):
    try:
        await callback.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")

    try:
        user = await db.get_user(message.from_user.id)
        if not user:
            await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –í–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å –æ–Ω–ª–∞–π–Ω
        await db.toggle_module(message.from_user.id, "online")
        await message.answer("‚úÖ –ú–æ–¥—É–ª—å '–û–Ω–ª–∞–π–Ω' –≤–∫–ª—é—á–µ–Ω!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –º–æ–¥—É–ª—è –æ–Ω–ª–∞–π–Ω: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@user_router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: Message):
    logger.info(f"üîò –Æ–∑–µ—Ä {message.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ü—Ä–æ—Ñ–∏–ª—å'")
    try:
        user = await db.get_user(message.from_user.id)
        if not user:
            await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        profile_text = Texts.profile_text(
            user_id=user.telegram_id,
            first_name=message.from_user.first_name or user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            subscription_end_date=user.subscription_end_date,
            count_messages=user.active_messages_count,
            count_messages_deleted=user.deleted_messages_count,
            count_messages_edited=user.edited_messages_count
        )
        await message.answer(profile_text, reply_markup=kb.profile_keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è")

from aiogram.fsm.context import FSMContext

@user_router.message(F.text == "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def buy_subscription_handler(message: Message, state: FSMContext):
    logger.info(f"üîò –Æ–∑–µ—Ä {message.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'")
    try:
        user = await db.get_user(message.from_user.id)
        if user and user.subscription_end_date and user.subscription_end_date > datetime.now():
            await message.answer(Texts.SUBSCRIPTION_BUY_ALREADY_ACTIVE)
            return

        from bot.services.payments import create_invoice

        price = await db.get_subscription_price()
        bot_info = await message.bot.get_me()
        invoice = await create_invoice(price, message.from_user.id, bot_info.username)

        if not invoice["pay_url"]:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º invoice_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await state.update_data(invoice_id=invoice["invoice_id"])

        await message.answer(
            Texts.subscription_buy_text(str(price)),
            reply_markup=kb.get_payment_keyboard(invoice["pay_url"], invoice["invoice_id"])
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞
        asyncio.create_task(check_payment_status(message, invoice["invoice_id"]))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")

@user_router.message(F.text == "‚öôÔ∏è –§—É–Ω–∫—Ü–∏–∏")
async def functions_handler(message: Message):
    logger.info(f"üîò –Æ–∑–µ—Ä {message.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–§—É–Ω–∫—Ü–∏–∏'")
    try:
        user = await db.get_user(message.from_user.id)
        if not user:
            await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        if not user.subscription_end_date or user.subscription_end_date < datetime.now():
            await message.answer("‚ùå –¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!\n\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º.")
            return

        user_settings = {
            'notifications_enabled': user.notifications_enabled,
            'edit_notifications': user.edit_notifications,
            'delete_notifications': user.delete_notifications
        }
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:", reply_markup=kb.get_functions_keyboard(user_settings))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ—É–Ω–∫—Ü–∏–π")

@user_router.callback_query(lambda c: c.data.startswith("toggle_") and not c.data.startswith("toggle_module_"))
async def toggle_function_handler(callback: CallbackQuery):
    try:
        function_type = callback.data.replace("toggle_", "")
        user = await db.get_user(callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        new_state = await db.toggle_notification(callback.from_user.id, function_type)

        user_settings = {
            'notifications_enabled': user.notifications_enabled,
            'edit_notifications': user.edit_notifications,
            'delete_notifications': user.delete_notifications
        }

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        if function_type == "all":
            user_settings['notifications_enabled'] = new_state
        elif function_type == "edit":
            user_settings['edit_notifications'] = new_state
        elif function_type == "delete":
            user_settings['delete_notifications'] = new_state

        try:
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:",
                reply_markup=kb.get_functions_keyboard(user_settings)
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
        await callback.answer(f"{'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if new_state else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@user_router.callback_query(lambda c: c.data.startswith("check_payment_"))
async def check_payment_callback(callback: CallbackQuery):
    try:
        invoice_id = int(callback.data.replace("check_payment_", ""))
        from bot.services.payments import check_payment
        from sqlalchemy import update
        from bot.database.database import User

        if await check_payment(invoice_id):
            # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω
            end_date = datetime.now() + timedelta(days=30)
            await db.create_subscription(
                user_telegram_id=callback.from_user.id,
                end_date=end_date
            )
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ users
            async with db.get_db_session() as session:
                await session.execute(
                    update(User)
                    .where(User.telegram_id == callback.from_user.id)
                    .values(subscription_end_date=end_date)
                )
            await callback.message.edit_text("üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π.")
        else:
            await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã", show_alert=True)

@user_router.message(F.text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_handler(message: Message):
    logger.info(f"üîò –Æ–∑–µ—Ä {message.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'")
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí¨ –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏", url="https://t.me/+Q1L5k9NvsRdkNzVi")],
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")]
        ]
    )
    await message.answer(Texts.SUPPORT_TEXT, reply_markup=keyboard)

@user_router.message(F.text == "üìù –û—Ç–∑—ã–≤—ã")
async def reviews_handler(message: Message):
    logger.info(f"üîò –Æ–∑–µ—Ä {message.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–û—Ç–∑—ã–≤—ã'")
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–∑—ã–≤–æ–≤"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ö–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏", url="https://t.me/+VEgXUlw1NZA1MDcy")],
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")]
        ]
    )
    await message.answer(Texts.REVIEWS_TEXT, reply_markup=keyboard)

@user_router.message(F.text == "üì± –ú–æ–¥—É–ª–∏")
async def modules_handler(message: Message):
    logger.info(f"üîò –Æ–∑–µ—Ä {message.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ú–æ–¥—É–ª–∏'")
    user = await db.get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not user.subscription_end_date or user.subscription_end_date < datetime.now():
        await message.answer("‚ùå –¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!\n\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É–ª—è–º.")
        return

    user_settings = {
        'module_calc': user.module_calc_enabled if hasattr(user, 'module_calc_enabled') else False,
        'module_love': user.module_love_enabled if hasattr(user, 'module_love_enabled') else False
    }
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:", reply_markup=kb.get_modules_keyboard(user_settings))
async def check_payment_status(message: Message, invoice_id: int):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∏ –≤—ã–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É"""
    from bot.services.payments import check_payment, delete_invoice

    max_attempts = 60  # 30 –º–∏–Ω—É—Ç (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
    attempt = 0

    while attempt < max_attempts:
        if await check_payment(invoice_id):
            # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω
            await db.create_subscription(
                user_telegram_id=message.from_user.id,
                end_date=datetime.now() + timedelta(days=30)
            )
            await message.answer("üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π.")
            await delete_invoice(invoice_id)
            return

        attempt += 1
        await asyncio.sleep(30)  # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏

    # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    await message.answer("‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await delete_invoice(invoice_id)
@user_router.callback_query(lambda c: c.data.startswith("toggle_module_"))
async def toggle_module_handler(callback: CallbackQuery):
    try:
        module_type = callback.data.replace("toggle_module_", "")
        user = await db.get_user(callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        if not user.subscription_end_date or user.subscription_end_date < datetime.now():
            await callback.answer("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π", show_alert=True)
            return

        new_state = await db.toggle_module(callback.from_user.id, module_type)
        logger.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–µ—Ä–µ–∫–ª—é—á–∏–ª –º–æ–¥—É–ª—å {module_type} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {new_state}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        user = await db.get_user(callback.from_user.id)

        user_settings = {
            'module_calc': user.calc_enabled,
            'module_love': user.love_enabled
        }
        user_settings[f'module_{module_type}'] = new_state

        try:
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:",
                reply_markup=kb.get_modules_keyboard(user_settings)
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise

        await callback.answer(f"–ú–æ–¥—É–ª—å {module_type} {'‚úÖ –≤–∫–ª—é—á–µ–Ω' if new_state else '‚ùå –≤—ã–∫–ª—é—á–µ–Ω'}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –º–æ–¥—É–ª—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")